import ast

class TM:
    def __init__(self, sigma, gamma, delta, Q):
        self.sigma = sigma
        self.gamma = gamma
        self.delta = delta
        self.Q = Q
        self.q0 = min(Q)  # Initial state
        self.q_accept = max(Q)  # Halting state
    
    @staticmethod
    def read_input():
        sigma = ast.literal_eval(input())  # Input alphabet
        gamma = ast.literal_eval(input())  # Tape alphabet
        delta = ast.literal_eval(input())  # Transition function
        input_string = input()  # Input string  
        input_string = eval(input_string)
        
        return sigma, gamma, delta, list(delta.keys()), input_string
    
    def process_input(self, input_str: str) -> list:
        tape = list(input_str) + ["_"] * 20  # Initialize tape with extra blanks
        tape_head = 0
        curr_state = self.q0
        
        while curr_state in self.delta and self.delta[curr_state]:  # Continue until no transitions
            if tape_head < 0:  # Extend tape on the left
                tape.insert(0, "_")
                tape_head = 0
            elif tape_head >= len(tape):  # Extend tape on the right
                tape.append("_")
            
            current_symbol = tape[tape_head]
            curr_state_dict = self.delta.get(curr_state, {})
            
            try:
                trans_list = curr_state_dict[current_symbol]
                tape[tape_head] = trans_list[0]  # Write new symbol
                
                     # Move tape head
                if trans_list[1] == 'R':
                    tape_head += 1
                elif trans_list[1] == 'L':
                    tape_head -= 1

                # Transition to next state
                curr_state = trans_list[2]
            except KeyError:
                break
                
        
        return tape[:20], curr_state==self.q_accept  # Return only the first 20 cells of the tape


if __name__ == "__main__":
        inputA = ['0']  # Symbols the machine can read
        tapeA = ['0', '2', '3', '4' '_']  # Initial tape

        tF = {
        0: {'0': ['0', 'R', 1]},
        1: {'0': ['2', 'R', 1], '_': ['_', 'L', 2]},
        2: {
            '3': ['3', 'L', 2],
            '4': ['4', 'L', 2],
            '2': ['3', 'R', 3],
            '0': ['0', 'R', 4]
        },
        3: {
            '2': ['2', 'R', 3],
            '3': ['3', 'R', 3],
            '4': ['4', 'R', 3],
            '_': ['4', 'L', 2]
        },
        4: {
            '3': ['0', 'R', 4],
            '4': ['0', 'R', 5],
            '_': ['_', 'L', 5]
        },
        5: {
            '4': ['2', 'R', 5],
            '_': ['_', 'L', 2]
        }
    }
    
    tm = TM(inputA, tapeA, tF, tF.keys())
    
    tape_list = tm.process_input('000')
    print(f'{tape_list[0]}\n{tape_list[1]}')
